from ast import Delete
import sys
import hashlib
import pyudev
import requests
import PyQt5
import os
import time
from PyQt5.QtWidgets import QApplication , QWidget ,QLineEdit , QPushButton , QTextEdit , QVBoxLayout ,QFileDialog,QMessageBox

from detect_malicious import Delete_mal, WhiteList, generate_hashes,match_hashes

class MyApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("USB Malwares")
        self.userInput = ""
        self.Sus_files_list = []
        self.Sus_hashes = []
        layout = QVBoxLayout()
        self.setLayout(layout)
        self.ChoiceOne = QPushButton("Add malicious file to database") #to add digest of a file to the DB
        self.ChoiceTwo = QPushButton("Scan a USB") #to scan a usb
        self.lastBtn = QPushButton("Apply")
        self.out = QTextEdit()
        self.In = QLineEdit()
        layout.addWidget(self.ChoiceOne)
        layout.addWidget(self.ChoiceTwo)
        layout.addWidget(self.out)
        layout.addWidget(self.In)
        layout.addWidget(self.lastBtn)
        #in case of choice one
        self.ChoiceOne.clicked.connect(self.getfile)
        #in case of choice two
        self.ChoiceTwo.clicked.connect(self.Scan)
        self.lastBtn.clicked.connect(self.Apply)
    #Choose a malicious file to hash it and add it to the database
    def getfile(self):
        fname = QFileDialog.getOpenFileName(self,'open file', 'c:\\',"Python files (*.py)")
        if fname != "":
            path = fname[0]
            f = open(path, "r")
            m = hashlib.sha1(f.read().encode()).hexdigest()
            data = {
            	'name': path.split('/')[-1],
            	'digest': m
        	}
            URL = "http://localhost:9000/api/digests/post"
            r = requests.post(URL,data)
            print(r.text)
            QMessageBox.about(self,"Info","File Hash added!")


    def Scan(self):
        URL = "http://localhost:9000/api/digests/read"
        context = pyudev.Context()
        monitor = pyudev.Monitor.from_netlink(context)
        monitor.filter_by(subsystem='usb')
        output = []
        QMessageBox.about(self, "Info", "Please enter the USB device")
        for device in iter(monitor.poll, None):

            if device.action == 'add':
                # ACTIONS
                time.sleep(2.5)
                for folder in os.listdir("/media/abdullah/"):
                    hashed_list = []
                    Sus_files_list = []
                    Py_files_pathes=[]
                    Sus_hashes = []
                    fullPath = os.path.join("/media/abdullah/", folder)
                    if os.path.isdir(fullPath):
                        QMessageBox.about(self,"Info","Device at {} was detected".format(fullPath))
                        generate_hashes(fullPath, hashed_list,Py_files_pathes)
                        r = requests.get(URL)
                        data = r.json()
                        digests = []
                        for HASH in data:
                            if not HASH['whitelisted']:
                                digests.append(HASH['digest'])
                        match_hashes(digests, hashed_list, fullPath, output,Py_files_pathes,Sus_files_list,Sus_hashes)
            break
        
        if len(Sus_files_list) !=0:
            outStr = ""
            outStr+="the following files are suspected to be malicious:\n"
            for i in Sus_files_list:
                outStr+=i+"\n"
            # make the user delete the files OR IGNORE the files (white list) OR suspend the USB
            outStr+="enter in the following Line Input\n1 for deleting \n2 for white listing the file\n3 for suspending the USB\n"
            self.out.setText(outStr)
            self.Sus_files_list = Sus_files_list
            self.Sus_hashes = Sus_hashes
        else:
            QMessageBox.about(self,"Info",'USB is safe to use!') 
    
    def Apply(self):
        self.userInput = self.In.text()
        if self.userInput == '1':
            Delete_mal(self.Sus_files_list)
        elif self.userInput == '2':
            WhiteList(self.Sus_hashes)
        elif self.userInput == '3':
            os.system('sudo eject /media/abdullah/USB\ Stick')
        


app = QApplication(sys.argv)
window = MyApp()
window.show()

sys.exit(app.exec())
