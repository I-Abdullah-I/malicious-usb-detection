#!/usr/bin/env python
from ast import Delete
import sys
import hashlib
import pyudev
import requests
import PyQt5
import os
import time
from PyQt5.QtWidgets import QApplication , QWidget ,QLineEdit , QPushButton , QTextEdit , QVBoxLayout ,QFileDialog,QMessageBox

from detect_malicious import Delete_mal, WhiteList, generate_hashes,match_hashes

class MyApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("USB Malwares")
        self.userInput = ""
        self.Sus_files_list = []
        self.Sus_hashes = []
        self.USB_path = ""
        layout = QVBoxLayout()
        self.setLayout(layout)
        self.ChoiceOne = QPushButton("Add malicious file to database") #to add digest of a file to the DB
        self.ChoiceTwo = QPushButton("Scan a USB") #to scan a usb
        self.DeleteMal = QPushButton("Delete malicious files")
        self.WhiteList = QPushButton("Whitelist the files")
        self.EjectUSb = QPushButton("Suspend the USB")
        # self.lastBtn = QPushButton("Apply")
        self.out = QTextEdit()
        # self.In = QLineEdit()
        layout.addWidget(self.ChoiceOne)
        layout.addWidget(self.ChoiceTwo)
        layout.addWidget(self.out)
        # layout.addWidget(self.In)
        layout.addWidget(self.DeleteMal)
        layout.addWidget(self.WhiteList)
        layout.addWidget(self.EjectUSb)
        # layout.addWidget(self.lastBtn)
        #in case of choice one
        self.ChoiceOne.clicked.connect(self.getfile)
        #in case of choice two
        self.ChoiceTwo.clicked.connect(self.Scan)
        self.DeleteMal.clicked.connect(self.delete_mal)
        self.WhiteList.clicked.connect(self.white_list)
        self.EjectUSb.clicked.connect(self.eject_USB)
        # self.lastBtn.clicked.connect(self.Apply)
    #Choose a malicious file to hash it and add it to the database
    def getfile(self):
        fname = QFileDialog.getOpenFileName(self,'open file', 'c:\\',"Python files (*.py)")
        if fname != "":
            path = fname[0]
            f = open(path, "r")
            m = hashlib.sha1(f.read().encode()).hexdigest()
            data = {
            	'name': path.split('/')[-1],
            	'digest': m
        	}
            URL = "http://localhost:9000/api/digests/post"
            r = requests.post(URL,data)
            print(r.text)
            QMessageBox.about(self,"Info","File Hash added!")


    def Scan(self):
        URL = "http://localhost:9000/api/digests/read"
        context = pyudev.Context()
        monitor = pyudev.Monitor.from_netlink(context)
        monitor.filter_by(subsystem='usb')
        output = []
        self.out.setText("please enter the USB")
        for device in iter(monitor.poll, None):

            if device.action == 'add':
                # ACTIONS
                time.sleep(2.5)
                for folder in os.listdir("/media/abdullah/"):
                    hashed_list = []
                    Sus_files_list = []
                    Py_files_pathes=[]
                    Sus_hashes = []
                    fullPath = os.path.join("/media/abdullah/", folder)
                    if os.path.isdir(fullPath):
                        self.USB_path = fullPath
                        QMessageBox.about(self,"Info","Device at {} was detected".format(fullPath))
                        self.out.setText("")
                        generate_hashes(fullPath, hashed_list,Py_files_pathes)
                        r = requests.get(URL)
                        data = r.json()
                        digests = []
                        for HASH in data:
                            if not HASH['whitelisted']:
                                digests.append(HASH['digest'])
                        match_hashes(digests, hashed_list, fullPath, output,Py_files_pathes,Sus_files_list,Sus_hashes)
            break
        
        if len(Sus_files_list) !=0:
            outStr = ""
            outStr+="the following files are suspected to be malicious:\n"
            for i in Sus_files_list:
                outStr+=i+"\n"
            # make the user delete the files OR IGNORE the files (white list) OR suspend the USB
            outStr+="choose using the following buttons what to do with these files\n"
            self.out.setText(outStr)
            outStr = ""
            self.Sus_files_list = Sus_files_list
            self.Sus_hashes = Sus_hashes
        else:
            QMessageBox.about(self,"Info",'USB is safe to use!') 
    def delete_mal(self):
        try:
            Delete_mal(self.Sus_files_list)
            QMessageBox.about(self,"Info",'Malicious files were deleted successfuly!')
            self.out.setText("")
        except:
            QMessageBox.about(self,"Error",'Could not delete the files!')
    def white_list(self):
        try:
            ret = WhiteList(self.Sus_hashes)
            if ret == 1:
                QMessageBox.about(self,"Info",'Files were whitelisted successfully!')
                self.out.setText("")
            elif ret == 0:
                QMessageBox.about(self,"Error",'Error whitelisting the files!')
        except:
            QMessageBox.about(self,"Error",'Error whitelisting the files!')
    def eject_USB(self):
        try:
            os.system('sudo eject {}'.format(self.USB_path))
            QMessageBox.about(self,"Info",'USB was eejected successfuly!')
            self.out.setText("") 
        except:
            QMessageBox.about(self,"Error",'Could not eject the USB!')
        


app = QApplication(sys.argv)
window = MyApp()
window.show()

sys.exit(app.exec())
